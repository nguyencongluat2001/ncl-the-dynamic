<?php

namespace App\Modules\{{MODULE_NAME}}\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Filesystem\Filesystem;

class {{MODULE_NAME}}ServiceProvider extends ServiceProvider
{
    /**
     * Instance of Filesystem to manipulate files and directory
     *
     * @var
     */
    protected $files;

    /**
     * Module name
     *
     * @var string
     */
    protected $moduleName = "{{MODULE_NAME}}";

    /**
     * The event listener mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        'App\Events\SomeEvent' => [
            'App\Listeners\EventListener',
        ],
    ];

    /**
     * The subscriber classes to register.
     *
     * @var array
     */
    protected $subscribe = [];

    /**
     * Bootstrap the application services.
     *
     * @return void
     */
    public function boot()
    {
        //Register event and listeners
        foreach ($this->listen as $event => $listeners) {
            foreach ($listeners as $listener) {
                \Event::listen($event, $listener);
            }
        }

        //Register event subscribers
        foreach ($this->subscribe as $subscriber) {
            \Event::subscribe($subscriber);
        }

        // Allow routes to be cached
        if (!$this->app->routesAreCached()) {
            $routes = base_path() . '/Modules/' . $this->moduleName . '/routes.php';
            if ($this->files->exists($routes))
                include $routes;
        }

        $this->loadViewsFrom(base_path() . '/Modules/' . $this->moduleName . '/Views', $this->moduleName);

        $this->loadTranslationsFrom(base_path() . '/Modules/' . $this->moduleName . '/lang', $this->moduleName);
    }

    /**
     * Register the application services.
     *
     * @return void
     */
    public function register()
    {
        $this->files = new Filesystem ();
    }
}